NewsSources: https://newsapi.org/
Account on newsapi.org: apikey: 4fd46387a9f1413e8e2a07fd8911a0ec
	 		News APT: New York Times APT, https://newsapi.org/the-new-york-times-api
CodeSources: https://www.youtube.com/watch?v=C7gCKUb8LDM&list=PLCCszAMe5RTbXfTZd1hB_wKRF1sB0rGva&index=3
Platform: macOS Sierra Version 10.12.1
Xcode: Version 8.2.1

#———————————————————————————————————————Part 1——————————————————————————————————————#

1.  Get the JSON news API from newapi.org, for now we need the news from techcrunch.
		https://newsapi.org/
2.  Create a new project in Xcode. 
    Choose the single view ios Project and choose the language to be swift.
    
###################
# Set constraints #
###################

3.  In the Main.storyboard, type in "navigation bar"(top), "table View"(next, let it spread on the entire screen), "view, represents a rectangle"(on the same level with he battery icon) on the bottom right, drag it onto our screen.  
    Put "view, represents a rectangle" before "Navigation bar" on the "View Controller Scene".

4.  Click on "view, represents a rectangle". Click on the third constraints (add new constraints). And click on left, top, right as constraints and set the height to be 20. Click on the height constraints. So far, we add 4 constraints to the "view, represents a rectangle".

5.  Click on "navigation bar" and "table view". Click on the add new constraints, and add left, top, right, bottom as 4 constraints to the "navigation bar" and "table view". 

###################
#    Set colors   #
###################

6.  Click on "view, represents a rectangle", on the right panel, choose the pen icon(show the attributes inspector). Set the background color to be orange.
    Click on "navigation bar", choose the pen icon(show the attributes inspector). Set the Bar tint to be orange. Uncheck "translucent". Click on the title under the "navigation bar", change the name to be "News Reader". Click back on the "navigation bar", and change the title color to be white.

###################
#     Add cells   #
###################

7.  Click on "table view". On the right panel, let the "prototype cells" to be 1. Drag the new prototype cells a little bit larger.
    Click on the "table view cell" and on the bottom right, type in "image". Drag the Image view into the screen and let it to be on the left center. Crop the image view to be a square. Click on add new constraints, set the height and width to be 130 and choose left. Add these three constraints to the image view.
    Click on the image view, and click on the "align" at the bottom, check the vertically in the container and add constraints to the image view.
    Type in "label" on the bottom right and drag the label in to the screen next to the image view. Change the label to be a anything you want. Change the "line" to be 0.    
    Click on the "label". Add new constraints to it, set the left to be 8 and add.
    Keep right clicked on the "label" and drag it to the image view. In the pop-out window, choose "top". This aligns the label to the top of the image view. Add another constraints, set the right to be 8 and add. Click on "update the frame" on the bottom.
    Drag the label to the in the center. Set the text to be bold. Font->style->bold, size->16. UPDATE.

    Drag in another label into the screen under the title. Set the font size to be 15. Set lines to be 0. Change the label content to what you want. Add new constraints to it, set left, top, right to be 8 and add these three constraints to it. UPDATE
    Drag in another label as an author label. Set it on the bottom right corner. Add new constraints, let the right and bottom to be 0 and add. UPDATE. Set the font size to be 14 and color to be Dark grey. Change the name of the label to be "Author".
    
    Keep right clicked on the text label and drag it to the author label. In the pop-out window, choose vertical spacing. Click on the vertical line, let "relation"->"greater than or equal", constant->8, second item->bottom.

###################
# Create new Class#
###################

8.  Click on the table cell and type in "ArticleCell" in the identifier.
    Right click on the project file and choose new file->Cocoa Touch Class, subclass of->UITableViewCell, class->ArticleCell.

9.  Click on Main.storyboard->ArticleCell->show the identifier inspector(on the right panel)->Custom Class, class to be "ArticleCell". Click on the two circles(Show the Assistant Editor)

10. To connect the outlet with the code panel, keep click on the ArticleCell on the view Controller scene. On the top code panel, Automatic->Manual->newsReader->NewsReader->ArticleCell.swift.

11. Keep right click on the ImageView in the view controller scene, drag it into the code page before override. Give the name of "ImgView". Same to "Title", "Description", and "Author". If accidentally made a mistake, click on the "Show the connections inspector" and disconnect the connection.

12. Right click on the project file->new file->Cocoa Touch Class, subclass of->NSObject, Class->Article. 
    In the Article.swift, type in:
    
    var headline: String?
    var text: String?
    var author: String?
    var url: String?
    var imgurl: String?

13. Click on Main.storyboard-> Table View-> | Manual->Automatic->ViewController.swift.
    Keep right clicked on the Table View and drag it before the override and call the connection to be "TableView".
    Go back to click on the ViewController.swift, change the class line "class ViewController: UIViewController {", to be 
	"class ViewController: UIViewController, UITabBarDelegate, UITableViewDataSource {"

    To let the table view listen to our class.

    Delete,
    "
        override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    "
   
    Type in cellForRowAt, choose the first automatically function, 
    "
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        <#code#>
    }
    "
    
    <#code#> is like this:
    "
    let cell = tableView.dequeueReusableCell(withIdentifier: "ArticleCell", for: indexPath)
        return cell
    "    
    Note that "ArticleCell" is the identifier of the ArticleCell.



    Type in "number", choose the first automatically function,
    "
    func numberOfSections(in tableView: UITableView) -> Int {
        <#code#>
    }
    "
    <#code#> is like this:
    "
    return 1
    " 
    

    Type in "numberOfRowsInSection", choose the first automatically function, 
    "
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        <#code#>
    }
    "
    <#code#> is like this:
    "
    return 0
    " 


#———————————————————————————————————————Part 2——————————————————————————————————————#

1.  Click on the Main.storyboard->Table View. Right clicked on the Table View and drag it to the View Controller, choose "data source" and "delegate(委托)".

2.  Click on "ViewConstroller.swift", change the UITabDelegate to UITableViewDelegate. Change the func tableView as:
    basic idea: add "as! ArticleCell" at the end of let line.
    "
    let cell = tableView.dequeueReusableCell(withIdentifier: "ArticleCell", for: indexPath) as! ArticleCell
    "
3.  Write a function called "func fetchArticles(){}". Call fetchArticles in in the ovverride func viewDidLoad(){}, right after the super line.
    
4. Change the ViewConstroller.swift to be as this:
"
//
//  ViewController.swift
//  newsReader
//
//  Created by lindashen on 1/9/17.
//  Copyright © 2017 lindashen. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    @IBOutlet weak var TableView: UITableView!

    var articles: [Article]? = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        fetchArticles()
    }

    func fetchArticles() {
    
        let urlRequest = URLRequest(url: URL(string:"https://newsapi.org/v1/articles?source=the-new-york-times&sortBy=top&apiKey=4fd46387a9f1413e8e2a07fd8911a0ec")!) //      ! is used to unwrap sth.
        
        let task = URLSession.shared.dataTask(with: urlRequest){ (data, reponse, error) in
            
            // data is for JSON, response is for the answer, error is for if there is sth happens
            
            // we would like to check if there is an error or not
            if error != nil {
                print(error)
                return
            }
            
            self.articles = [Article]()
            
            do {
                let json = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers) as! [String: AnyObject]  // This gives us a dictionary of things.
                if let articlesFromJson = json["articles"] as? [[String: AnyObject]] {
                    for each_articleFromJson in articlesFromJson {
                        let article = Article()
                        if let author = each_articleFromJson["author"] as? String, let desc = each_articleFromJson["description"] as? String, let title = each_articleFromJson["title"] as? String, let imgtourl = each_articleFromJson["urlToImage"] as? String, let url = each_articleFromJson["url"] as? String {
                            article.author = author
                            article.headline = title
                            article.imgurl = imgtourl
                            article.text = desc
                            article.url = url
                        }
                        self.articles?.append(article)
                    }
                }
                DispatchQueue.main.sync {
                    self.TableView.reloadData()
                }
            } catch let error {
                print(error)
            }
        }
        task.resume()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ArticleCell", for: indexPath) as! ArticleCell
        
        cell.Title.text = self.articles?[indexPath.item].headline
        cell.Description.text = self.articles?[indexPath.item].text
        cell.Author.text = self.articles?[indexPath.item].author
        cell.ImgView.downloadImage(from: (self.articles?[indexPath.item].imgurl!)!)
        
        return cell
    }

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.articles?.count ?? 0  // if self.articles?.count == nil use 0, else use itself
    }
}

extension UIImageView {
    func downloadImage(from url: String){
        let urlRequest = URLRequest(url: URL(string: url)!)
        let task = URLSession.shared.dataTask(with: urlRequest) {(data, response, error) in
            // here, data is the image
            
            // check if there is an error or not
            if error != nil{
                print(error)
                return
            }
            DispatchQueue.main.sync {
                //self.image is the UIImageView Extension
                self.image = UIImage(data: data!)
            }
        }
        // to fire the task
        task.resume()
    }
}
"


#———————————————————————————————————————Part 3——————————————————————————————————————#

###################
#  Create views   #
###################

1.  Click on the Main.storyboard, type in "view Constroller" at the bottom right and drag it into the screen, just next to the previous view controller. Add "navigation bar", "view" as we did before. Type in "bar button" and drag it next to the News Reader and let it to be "< Back". Set the color to be white.
    Type in "UI Web View" and drag it under the navigation bar. Let it spread to the rest of the space.

2.  Constraints. Add constraints to "view", "navigation bar", "web view". Set left, top, right to  be 0 and add these 3 constraints to all of them.

###############################
# Create a class for web view #
###############################

3.  Right click on project file->new file->Cocoa Touch Class, subclass of->UIViewController, Class->WebViewController. In the pop-out code page, delete "override func didReceiveMemoryWarning(){}" function and the following commented lines.

4.  Click on new View Controller Scene and choose the "show the identity inspector" on the right panel. Set the class to be "WebViewController".

5.  Right before the override function, right click on WebView and drag it to the room before override function. Name it as "WebView".
    In the viewDidLoad function, type in 
     	"WebView.loadRequest(URLRequest(url: URL(string: url!)!))" after super line.
    Initialize url at the first beginning after the @IBOutlet line, such as 
	"var url: String?"

    In the ViewController.swift, add 
"
// PART 3
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let Web_View_Constroller = UIStoryboard.init(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "web") as! WebViewController
    }
"
    in the class function, right after tableview function. 
    "web" here in the function is the identity ID of storyboard. To set it, go to Main.storyboard->Web View Controller, Identity(on the right panel)->Storyboard ID = web.


    Add something in the tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath),
"
Web_View_Constroller.url = self.articles?[indexPath.item].url
self.present(Web_View_Constroller, animated: true, completion: nil)
"

###############################
# Back Button Touch function  #
###############################

6.  In the Web View Controller Scene, right click on the <Back button and drag it to the View Controller Scene. In the pop-out window, choose "show".

7.  Click on Info.plist on the left panel, randomly click on a "+" button. Type in "App Transport Security Settings". 
    Click on the arrow on the left, and click on "+" button. Add the first automatically name, "Allow Arbitrary Loads", let the value to be "YES".



#———————————————————————————————————————Part 4——————————————————————————————————————#

###############################
#    Add Timer to Web view    #
###############################

1.  Click on Main.storyboard, type in "Label" at the bottom right corner and drag it to the screen, on the top right corner of the webviewcontroller scene. Set it properly.

2.  Click on WebViewController.swift. Right clicked on the new label component and drag it to the WebViewController.swift right before WebView component. 
    Initialize three new variables including "seconds = Int(0)", "minutes = Int(0)", and "ClockTimer = Timer()".
    Right in the viewDidLoad function, let ClockTimer to be Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: Selector("updateClockTime"), userInfo: nil, repeats: true). Selector chooses the function and in the following part. 
    Write a function called updateClockTime(){} , as follows:
"
func updateClockTime(){
//        ClockLabel.text = DateFormatter.localizedString(from: Date(), dateStyle: DateFormatter.Style.none, timeStyle: DateFormatter.Style.full)
        seconds += 1
        if (seconds == 60){
            seconds = 0
            minutes += 1
        }
        if (seconds < 10 && minutes < 10) {
            ClockLabel.text = "0\(minutes):0\(seconds)"
        } else if (seconds < 10 && minutes > 9) {
            ClockLabel.text = "\(minutes):0\(seconds)"
        } else if (seconds > 9 && minutes < 10) {
            ClockLabel.text = "0\(minutes):\(seconds)"
        } else {
            ClockLabel.text = "\(minutes):\(seconds)"
        }
    }
"

#———————————————————————————————————————Part 5——————————————————————————————————————#

#########################################
#    Add Scroll Detection to WebView    #
#########################################

1.  Click on the WebViewController.swift code page, and initialize a private variable "lastContentOffest = CGFloat(0)". In the function of viewDidLoad(), add following command line: 
		"WebView.scrollView.delegate = self"
right after the load request.

2.  Add a system built-in function called scrollViewDidScroll, as follows,
"
func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if (self.lastContentOffset > scrollView.contentOffset.y) {
            // move up
            print("up")
        }
        else if (self.lastContentOffset < scrollView.contentOffset.y) {
            // move down
            print("down")
        }
        
        // update the new position acquired
        self.lastContentOffset = scrollView.contentOffset.y
    }

"
    
3.  Don't forget to add another method to the class of WebViewController ——> UIScrollViewDelegate.

4.  Add a label to record the percentage of the scroll. Put it on the bottom right corner.

5.  Add a orange monitor bar at the bottom of the web view page.

6.  In WebViewController.swift, under scrollViewDidScroll function, add the following code. (This is used to print the percentage of each scroll.)
"
let percentage: Double = Double(round(scrollView.contentOffset.y / (scrollView.contentSize.height - WebView.frame.size.height) * 10000) / 100)
        let string_percentage = String(percentage)
        
        print("\(string_percentage)%")
"

7.   Click on Main.storyboard, right click on percentage label and drag it to the WebViewController.swift, under the class of WebViewController. Name it as "PercentageLabel". Comment out "private var lastContentOffset = CGFloat(0)" and STEP 2. Under the scrollViewDidScroll function, replace the print message with "PercentageLabel.text = "\(string_percentage)%"". 
     Initiate the percentage label to be 0.0% on the right panel.



#———————————————————————————————————————Part 6——————————————————————————————————————#

#########################################
#     Get the components of the url     #
#########################################

1.  First, get the HTML content based on url. In the WebViewController.swift, under the function of viewDidLoad(), type in 
"
guard let myURL = URL(string: (url)!) else {
            print("Error")
            return
        }
        do {
            let myHTMLString = try String(contentsOf: myURL, encoding: .ascii)
            print("HTML: \r\(myHTMLString)")
            
        } catch let error {
            print("Error")
        }
"

##################################
#     Check DOM's visibility     #
##################################

2.   Useful references.
http://stackoverflow.com/questions/32891466/uitesting-xcode-7-how-to-tell-if-xcuielement-is-visible
     It seems like we could use "stringByEvaluatingJavascript".
"
self.WebView.stringByEvaluatingJavaScript(from: "alert('This is a javascript')")
"



#———————————————————————————————————————Part 7——————————————————————————————————————#

################################
#     Save data to local disk  #
################################

1.  Add save and send button.
    Create a button in the center of the bottom panel. Name it as "Save & Send" button. Right click it and drag to the WebViewController.swift, name it as SaveSubmitBtn. Right after the function of updateClockTime, right click on the button in the storyboard and drag to the space beneath the updateClockTime, choose IBAction, and name it as SaveSubmitBtnPressed. Inside the function, type in 
"
print("pressed")
"
    So far, once we click on the button, "pressed" will show up on the console.

2.  Already created an array to store time and affiliated percentage for each article. Here goes how to save the array to local disk.
    First, in the WebViewController.swift, change store_data to be "var store_data = [String]()". 
    Then under the function of updateClockTime(), change the currentvalues to be "let currentvalues = String(seconds + minutes * 60) + "," + String(percentage_store)". 
    Next, under the function of SaveSubmitBtnPressed, add the following stuff, 
"
// save time and percentage to local disk.
        do {
            // get the documents folder url
            
            let documentDirectoryURL = try FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
            let title_temp = story_title.replacingOccurrences(of: " ", with: "_", options: String.CompareOptions.literal, range: nil)
            
            // create the destination url for the text file to be saved
            // This url will be used to send to AWS account. 
            
            let fileDestinationUrl = documentDirectoryURL.appendingPathComponent("\(title_temp).txt")
            let text = store_data.joined(separator: "\n")
            do {
                // writing to disk
                try text.write(to: fileDestinationUrl, atomically: false, encoding: .utf8)
                
                // saving was successful. any code posterior code goes here
                // reading from disk
                do {
                    // success notification
                    print("successfully saved at\(fileDestinationUrl)")
                } catch let error as NSError {
                    print("error loading contentsOf url \(fileDestinationUrl)")
                    print(error.localizedDescription)
                }
            } catch let error as NSError {
                print("error writing to url \(fileDestinationUrl)")
                print(error.localizedDescription)
            }
        } catch let error as NSError {
            print("error getting documentDirectoryURL")
            print(error.localizedDescription)
        }
"
    Don't forget to create a new variable called story_title at the first beginning of WebViewController.swift, as follows,
"
var story_title: String = "title"
"
    To connect the story_title with the title in the ViewController, go back to ViewController.swift, under the function following // PART 3 comment, add 
"
Web_View_Constroller.story_title = (self.articles?[indexPath.item].headline)!
" 
    Here, the saved txt file has the name of article title.

3.  So far, we get the time data and percentage data in our local disk, url is stored in "fileDestinationUrl" (inside WebViewController.swift).

################################
#      Send to AWS account     #
################################

4.  

/////////////////////////////////////////////////////////////////////////////
//                                  Next Step                              //
// 1. Get the element in the url. HTML and Javascript. Assign ID to each DOM. Finish part 6 STEP 2. //
// 2. Future step, send the user's information data (at least the device number). //
// 3. Finish Part 7 STEP 4.
/////////////////////////////////////////////////////////////////////////////
//                                  Some Notes                             //
// 1. Because New York Times request sign-ins after several attempts of reading, I changed the news api to Reuters: https://newsapi.org/v1/articles?source=reuters&sortBy=top&apiKey=4fd46387a9f1413e8e2a07fd8911a0ec 
      This should be fixed in the future. //
// 2. Design a button to show the time message and the percentage message instead of showing them at the bottom. It's not beautiful.  // 
// 3. The saved file is named with the article name. Need to figure how to add the device information in the txt file or the folder of the saved file. Hence, in the future step when analyzing the data, I have a sense of who is the person and get his/her interest based on the sent data and text analysis of the paragraph. //
// 4. Need to create a button to notify me at which point is the page fully loaded. Or use the UIActivityIndicator, see reference: http://sweettutos.com/2012/09/27/loading-url-with-an-uiactivityindicator/. Otherwise, the time flag is not accurate at all. //
/////////////////////////////////////////////////////////////////////////////